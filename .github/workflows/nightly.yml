# This is a basic workflow to help you get started with Actions

name: Sharun CI (Nightly)

# Controls when the action will run. 
on:
  schedule:
    - cron: "0 7 1/3 * *"
  workflow_dispatch: {}

jobs:
  build:
    name: "${{ matrix.name }} (${{ matrix.arch }})"
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            name: "Dolphin build"
            arch: x86_64
          - runs-on: ubuntu-24.04-arm
            name: "Dolphin build"
            arch: aarch64
    container: ghcr.io/pkgforge-dev/archlinux:latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Get dependencies
        run: chmod +x ./get-dependencies.sh && ./get-dependencies.sh

      - name: Make AppImage
        run: |
          export DEVEL=true
          chmod +x ./dolphin-emu-appimage.sh  && ./dolphin-emu-appimage.sh
          mkdir dist
          mv *.AppImage* dist/

      - name: Check version file
        run: |
         cat ~/version
         echo "APP_VERSION=$(cat ~/version)" >> "${GITHUB_ENV}"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.3
        with:
          name: AppImage-${{ matrix.arch }}
          path: 'dist'
          
      - name: Upload version file
        uses: actions/upload-artifact@v4.4.3
        with:
         name: version
         path: ~/version
         overwrite: true
    
  release:
      needs: [build]
      permissions: write-all
      runs-on: ubuntu-latest

      steps:
        - uses: actions/download-artifact@v4.1.8
          with:
            name: AppImage-x86_64
        - uses: actions/download-artifact@v4.1.8
          with:
            name: AppImage-aarch64
        - uses: actions/download-artifact@v4.1.8
          with:
            name: version

        - name: Read version
          run: |
            cat version
            export VERSION="$(cat version)"
            export SNAPSHOT_TAG="$(date --utc +'%Y-%m-%d')"
            echo "APP_VERSION=${VERSION}" >> "${GITHUB_ENV}"
            echo SNAPSHOT_TAG="${SNAPSHOT_TAG}" >> "${GITHUB_ENV}"
    
        #Version Release
        - name: Del Previous Release
          run: |
            gh release delete "nightly" --repo "${GITHUB_REPOSITORY}" --cleanup-tag  -y
            sleep 5
          env:
            GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          continue-on-error: true

        - name: Release nightly build
          uses: softprops/action-gh-release@v2
          with:
            name: "Nightly Build (${{ env.SNAPSHOT_TAG }})"
            tag_name: "nightly"
            prerelease: true
            draft: false
            generate_release_notes: false
            make_latest: false
            files: |
              *.AppImage*
